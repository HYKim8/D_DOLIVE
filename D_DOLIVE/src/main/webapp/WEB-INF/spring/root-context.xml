<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- 마이바티스 -->
	<!-- mybatis -->
 	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"
		destroy-method="clearCache">
		<constructor-arg index="0" ref="sqlSessionFactoryBean"></constructor-arg>
	</bean>
	
	<!-- mybatis config파일 read: SqlSessionFactoryBean -->
 	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
	   <property name="configLocation" value="classpath:mybatis-config.xml" />
	   <property name="mapperLocations" value="classpath:mappers/**/*.xml" />
	   <property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- //마이바티스 -->
	
	
	<!-- Locale: 로케일(locale [loukǽl] 로캘 / [loukάːl] 로칼)은 사용자의 언어, 
	    국가뿐 아니라 사용자 인터페이스에서 사용자가 선호하는 사항을 지정한 매개 변수의 모임이다. 
	    보통 로케일 증명자는 적어도 하나의 언어 증명자와 하나의 지역 증명자를 가지고 있다.
	     id는 반듯이  localeResolver 사용
	     웹브라우저 요청: Locale정보가 http요청 헤더에 포함되어 서버로 전송:localeResolver Read
    -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
	
	</bean>
	
	<!-- 다국어 설정 Read -->
	<!-- messageSource.properties read: id는 반드시 messageSource -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>message.messageSource</value>
			</list>
		</property>
	</bean>
	
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
		
	<!-- FileUpload: -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<!-- Upload Size: 1024*1024*5 -->
		<property name="maxUploadSize" value="52428800"></property>
		<property name="maxInMemorySize" value="52428800"></property>
	</bean>
	<!-- //FileUpload: -->
	
	
	<!-- 예외처리: -->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<!-- 특정 예외처리 -->
		<property name="exceptionMappings">
			<props>
				<!-- 예외클래스: ArithmeticException -->
				<prop key="java.lang.ArithmeticException">
					common/arithmeticError 
				</prop>
				
				<!-- 예외클래스: IllegalAgumentException -->
				<prop key="java.lang.IllegalArgumentException">
					common/illegalArgumentException
				</prop>
			</props>
		</property>
	
		<!-- Default: error -->
		<property name="defaultErrorView" value="common/error"/>
	</bean>
	<!-- //예외처리: -->
	
	
	
	<!-- mail -->
    <!-- spring mail:id/pass -->
    <bean  id="passwordAuth"  class="javax.mail.PasswordAuthentication">
        <constructor-arg index="0">
            <value>이메일아이디</value>
        </constructor-arg>
        <constructor-arg index="1">
            <value>이메일 비밀번호</value>
        </constructor-arg>        
    </bean>
    
    <!-- Authenticator -->
    <bean id="authenticator" class="javax.mail.Authenticator">
        <lookup-method  name="getPasswordAuthentication"
         bean="passwordAuth"
        />
    </bean>
    
    <!-- Session -->
    <bean id="emailSession" class="javax.mail.Session">
        <constructor-arg>
            <props>
                <prop key="mail.smtp.host">${mail.smtp.host}</prop>
                <prop key="mail.smtp.port">${mail.smtp.port}</prop>
                <prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
                <prop key="mail.smtp.ssl.enable">${mail.smtp.ssl.enable}</prop>
                <prop key="mail.smtp.ssl.trust">${mail.smtp.ssl.trust}</prop>
            </props>
        </constructor-arg>
        <constructor-arg ref="authenticator" />
    </bean>
    
    
    <!-- JavaMailSenderImpl -->
    <bean  id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="session" ref="emailSession"></property>
    </bean>
    
    <bean id="dummyMailSender" class="com.sist.d_dolive.member.imple.DummyMailSender">
    
    </bean>

    <!-- JDBC Transaction/Connection -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <!-- Transaction Advice -->
    <tx:advice id="transactionAdvice"  transaction-manager="transactionManager">
        <tx:attributes>
            <!-- get시작하는 method는 읽기 전용 -->
            <tx:method name="do*" read-only="true"/>
            <!-- 트랜잭션 대상 up-->
            <tx:method name="up*" />
        </tx:attributes>
    </tx:advice> 
    
    <!-- Trasaction Advisor -->  
    <aop:config>
        <aop:pointcut expression="execution(* com.sist.d_dolive..*Imple.up*(..))" 
             id="serviceTxPointCut"/>
        <aop:advisor advice-ref="transactionAdvice"  pointcut-ref="serviceTxPointCut"/>    
    </aop:config>	
	
	
	
	
	
	
	
	<!-- 디비 연결 -->
	<!-- properties file read -->
    <context:property-placeholder
      location="classpath:/resources/config/database.properties"
    />
    
    <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!-- JdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    	<property name="dataSource" ref="dataSource"></property>
    </bean>	
    <!-- //디비 연결 -->
	
</beans>
